* DP(Dynamic Programming)

복잡한 문제를 여러개의 간단한 문제로 분리하여 부분의 문제들을 해결함
결론적으로 복잡한 문제의 답을 구하는 방법
시간복잡도 측면에서 유리

* 조건
1. 최적 부분 구조
2. 중복되는 부분 문제

* 핵심
1. 큰 문제를 작은 문제로 나눌 수 있어야 함
2. 작은 문제들이 반복돼 나타나고 사용되며 이 작은 문제들의 결괏값은 항상 같아야 한다
3. 모든 작은 문제들을 한 번만 계산해 DP테이블에 저장하며
   추후 재사용할 때는 이 DP테이블을 이용
   메모이제이션(Memoization)기법 이라고도 함
4. 톱-다운, 바텀-업 방식으로 구현할 수 있음

가장 기본적인 문제 피보나치 수열

D[N] = D[N-1] + D[N-2]  ->  1 1 2 3 5 8 ...

1. DP로 풀 수 있는지 확인
    :6번째 피보나치 수열을 구하는 문제는 5,4번째 수열을 구하는 작은 문제로 나눌 수 있고
    :수열의 값은 항상 같으므로 DP로 풀 수 있다. 확인
2. 점화식 세우기
    :전체 문제와 부분 문제간 인과관계로 점화식 만듦
3. 메모이제이션 원리 이해
    :부분 문제를 풀었을 때 이 문제를 DP테이블에 저장
    :다음에 같은 문제가 나왔을 때 재계산하지 않고 DP테이블의 값을 이용
4. 톱-다운 구현 방식 이해
    :위에서부터 문제를 파악해 내려오는 방식 
    :주로 재귀함수 형태로 코드를 구현
5. 바텀-업 구현 방식 이해
    :가장 작은 부분 문제부터 문제를 해결하면서 점점 큰문제로 확장
    :주로 반복문의 형태로 구현
    :톱-다운 방식보다 좀더 안정적